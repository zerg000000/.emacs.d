* Basic Configuration
#+BEGIN_SRC emacs-lisp
  ; Environment Variables
  (if (eq system-type 'darwin)
    ; add homebrew common path
    (add-to-list 'exec-path "/usr/local/bin")
  )
  ; General editor behave

  ; Tab
  ; no tabs in my source code
  (setq tab-always-indent 'complete)
  (setq-default indent-tabs-mode nil)
  ; big enough to tell me never use tab
  (setq-default tab-width 8)

#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode +1)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
* Clojure
** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode)
    (add-hook 'lisp-mode-hook #'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode))
#+END_SRC
** Rainbow Delimiter
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t)
  (use-package rainbow-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-mode))
#+END_SRC
** Clojure mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (add-hook 'clojure-mode-hook #'paredit-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :config
    (setq nrepl-log-messages t))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode)
    :bind
    (:map projectile-mode-map
          ("C-c p s s" . counsel-projectile-ag)))
#+END_SRC
** Shortcut
** Charset
#+BEGIN_SRC emacs-lisp
  ;; Default File Encoding
  (prefer-coding-system 'utf-8)
  ;; Default File Encoding for different File
  (setq buffer-file-coding-system 'utf-8-unix
        default-file-name-coding-system 'utf-8-unix
        default-keyboard-coding-system 'utf-8-unix
        default-process-coding-system '(utf-8-unix . utf-8-unix)
        default-sendmail-coding-system 'utf-8-unix
        default-terminal-coding-system 'utf-8-unix)
#+END_SRC

* Appearance
** Emacs Style
#+BEGIN_SRC emacs-lisp

  ; don't make sound from emacs
  (setq ring-bell-function 'ignore)
  ; don't show the welcome screen
  (setq inhibit-startup-screen t)

  (set-face-attribute 'fringe nil
                      :foreground nil
                      :background nil)
  (set-frame-parameter nil 'internal-border-width 0)
  (set-window-buffer nil (current-buffer))

  (global-auto-revert-mode 1)
  (scroll-bar-mode -1)
  ; hide the toolbar, make screen more compact 
  (tool-bar-mode -1)
  ; disable cursor blink, which is noise
  (blink-cursor-mode -1)
  (global-linum-mode -1)
  ; line settings
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)  
#+END_SRC
** Fonts
You should install Fira Code first, in Mac OSX
#+BEGIN_SRC bash
brew tap homebrew/cask-fonts
brew cask install font-fira-code
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (set-default-font "Fira Code")
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme :ensure)
  (use-package challenger-deep-theme :ensure)
  (use-package zenburn-theme :ensure t :init (load-theme 'zenburn t))
#+END_SRC

** OrgMode
#+BEGIN_SRC emacs-lisp
  (use-package org :ensure t
    :init
    (setq org-src-fontify-natively t)
    (setq org-hide-leading-stars t)
    (setq org-log-into-drawer t)
    (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)" )))
    (add-hook 'org-mode-hook
              (lambda ()
                (setq org-src-ask-before-returning-to-edit-buffer nil)
                (org-indent-mode 1))))
  (setq org-ellipsis "â¤µ")
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
  
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+end_SRC
*** Code Snippet
#+BEGIN_SRC emacs-lisp
  (defun user/insert-emacs-lisp-src-block ()
    (interactive)
    (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC\n"))

  (bind-key "C-x C-'" #'user/insert-emacs-lisp-src-block)
#+END_SRC
